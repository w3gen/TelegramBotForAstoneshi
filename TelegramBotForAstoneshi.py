# -*- coding: utf-8 -*-
"""TelegramBotForAstoneshi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ggZkgzdYXiJ4uUY2dmib15Or4tvp9FvR

**Telegram Bot**

Simple Bot to save incoming messages.
"""

# importing all dependancies
import logging
import os
import telebot
from telegram import ParseMode
from telegram.ext import CallbackContext, Updater, CommandHandler, JobQueue, Dispatcher
import pymongo

# Override environment variables on dev environment if you test the bot
# Getting environment variables from Heroku configs if not overriden
BOT_TELEGRAM_API_TOKEN = os.environ.get('botKey', "2041101413:AAHXZ4YS9hQY0tQa-s_i8fCT4az1SYa89ZI")
BOT_MONGODB_CONECTION_URL = os.environ.get('mongodbConnectionURL',
                                           "mongodb+srv://botaUser:botaPassword@botscluster.j5qlm.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
BOT_DATABASE_NAME = os.environ.get('databaseName', "TelegramBotForAstoneshi")

# Initialize logging for debugging purpose
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s',
    level=logging.INFO)

logger = logging.getLogger(__name__)


# Database Class
class Database:
    # constructor
    def __init__(self):
        self.connectionURL = BOT_MONGODB_CONECTION_URL
        self.databaseName = BOT_DATABASE_NAME
        self.database = None
        self.dbClient = None

    # connect to the database
    def connect(self):
        try:
            if self.dbClient:
                logger.info("Database Client initialized.")
                self.dbClient = pymongo.MongoClient(self.connectionURL)
                self.database = self.dbClient[str(self.databaseName)]
                if self.database:
                    logger.info("Database Connected.")
                    return self.database
                else:
                    return None
            else:
                return None
        except Exception as er:
            logger.error(er)


# Message Class
class Message:

    # message constructor
    def __init__(self):
        self.messageText = None
        self.messageId = None
        self.userId = None
        self.userName = None
        self.userFirstName = None
        self.userLastName = None
        self.date = None
        db = Database()
        dbConnection = db.connect()
        self.messagesCollection = dbConnection["messages"]

    # save message object
    def save_message(self, messageContent):
        try:
            self.messagesCollection.insert_one(messageContent)
            return True
        except Exception as er:
            logger.error(er)
            return False


bot = telebot.TeleBot(BOT_TELEGRAM_API_TOKEN, parse_mode="markdown")


# Function to catch incomming command /about
@bot.message_handler(commands=['about'])
def about(message):
    try:
        bot.reply_to(message, "")
    except Exception as e:
        logger.info(e)


# Function to catch incomming command /help
@bot.message_handler(commands=['help'])
def about(message):
    try:
        bot.reply_to(message, "")
    except Exception as e:
        logger.info(e)

bot.polling()

"""

---


**View Data**

View collected data from the Bot"""
